# GPU-enabled Dockerfile for CUDA acceleration
FROM nvidia/cuda:11.8-devel-ubuntu22.04 AS gpu-builder

ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies including CUDA development libraries
RUN apt-get update && apt-get install -y \
    build-essential cmake ninja-build git \
    libeigen3-dev libfftw3-dev libomp-dev \
    libhdf5-dev python3 python3-dev python3-pip \
    && rm -rf /var/lib/apt/lists/*

RUN pip3 install --no-cache-dir pybind11[global] numpy

WORKDIR /build
COPY . /build/

# Build with CUDA enabled
RUN cmake -S . -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DUSE_CUDA=ON \
    -DUSE_EIGEN=ON \
    -DUSE_OPENMP=ON \
    -DUSE_JSON=ON \
    -DBUILD_FITTING_TOOLS=ON \
    -DUSE_FAST_MATH=ON \
    -DCMAKE_CUDA_ARCHITECTURES="70;75;80;86;89;90" \
    -DCMAKE_INSTALL_PREFIX=/opt/pseudomode

RUN cmake --build build --parallel $(nproc)
RUN cmake --build build --target install

# Runtime stage with CUDA runtime
FROM nvidia/cuda:11.8-runtime-ubuntu22.04

RUN apt-get update && apt-get install -y \
    libeigen3-dev libfftw3-3 libgomp1 libhdf5-103 \
    python3 python3-numpy \
    && rm -rf /var/lib/apt/lists/*

COPY --from=gpu-builder /opt/pseudomode /opt/pseudomode

ENV PATH="/opt/pseudomode/bin:$PATH"
ENV LD_LIBRARY_PATH="/opt/pseudomode/lib:$LD_LIBRARY_PATH"

WORKDIR /workspace
RUN useradd -m -s /bin/bash pseudomode && chown -R pseudomode:pseudomode /workspace
USER pseudomode

CMD ["pseudomode_cli", "--help"]

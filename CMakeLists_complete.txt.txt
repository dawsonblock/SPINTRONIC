#
# Extended 2D/3D Pseudomode Framework - Complete Production Build System
# Apache License 2.0 - Copyright (c) 2025 Aetheron Research
# Version 2.0.0 - Full Enterprise Implementation
#

cmake_minimum_required(VERSION 3.18)
project(pseudomode_framework_extended VERSION 2.0.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Build options
option(USE_CUDA "Enable CUDA GPU acceleration" ON)
option(USE_OPENMP "Enable OpenMP parallelization" ON)
option(USE_EIGEN "Use Eigen for linear algebra (required)" ON)
option(USE_JSON "Enable JSON support for materials database" ON)
option(USE_MPI "Enable MPI for distributed fitting" OFF)
option(BUILD_PYTHON_BINDINGS "Build Python bindings" ON)
option(BUILD_TESTS "Build unit tests" ON)
option(BUILD_BENCHMARKS "Build performance benchmarks" OFF)
option(BUILD_FITTING_TOOLS "Build parameter fitting tools" ON)
option(BUILD_ADVANCED_TOOLS "Build advanced analysis tools" ON)
option(BUILD_DOCKER_IMAGE "Build Docker container" OFF)

# Advanced options
option(ENABLE_PROFILING "Enable performance profiling support" OFF)
option(ENABLE_COVERAGE "Enable code coverage analysis" OFF)
option(ENABLE_SANITIZERS "Enable memory sanitizers" OFF)
option(USE_FAST_MATH "Enable aggressive math optimizations" OFF)

# Build configuration
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose build type" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "RelWithDebInfo" "MinSizeRel")
endif()

# Compiler-specific optimizations
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -march=native -mtune=native")
        if(USE_FAST_MATH)
            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -ffast-math")
        endif()
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        set(CMAKE_CXX_FLAGS_RELEASE "/O2 /DNDEBUG /arch:AVX2")
    endif()
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DDEBUG -Wall -Wextra")
endif()

# Coverage flags
if(ENABLE_COVERAGE)
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --coverage -g -O0")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --coverage")
    endif()
endif()

# Sanitizer flags
if(ENABLE_SANITIZERS)
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(SANITIZER_FLAGS "-fsanitize=address,undefined -fno-omit-frame-pointer -g")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SANITIZER_FLAGS}")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${SANITIZER_FLAGS}")
    endif()
endif()

# Find required packages
find_package(PkgConfig)

# Eigen (required)
if(USE_EIGEN)
    find_package(Eigen3 REQUIRED)
    if(NOT TARGET Eigen3::Eigen)
        find_package(PkgConfig REQUIRED)
        pkg_check_modules(EIGEN3 REQUIRED eigen3)
        add_library(Eigen3::Eigen INTERFACE IMPORTED)
        set_target_properties(Eigen3::Eigen PROPERTIES
            INTERFACE_INCLUDE_DIRECTORIES "${EIGEN3_INCLUDE_DIRS}")
    endif()
    add_definitions(-DUSE_EIGEN)
endif()

# OpenMP (recommended for performance)
if(USE_OPENMP)
    find_package(OpenMP REQUIRED)
    if(OpenMP_CXX_FOUND)
        add_definitions(-DUSE_OPENMP)
    else()
        message(WARNING "OpenMP requested but not found")
        set(USE_OPENMP OFF)
    endif()
endif()

# CUDA (optional but recommended for large systems)
if(USE_CUDA)
    find_package(CUDAToolkit QUIET)
    if(CUDAToolkit_FOUND)
        enable_language(CUDA)
        set(CMAKE_CUDA_STANDARD 17)
        set(CMAKE_CUDA_STANDARD_REQUIRED ON)

        # CUDA architecture detection
        if(NOT CMAKE_CUDA_ARCHITECTURES)
            set(CMAKE_CUDA_ARCHITECTURES "70;75;80;86;89;90")
        endif()

        find_package(CUDAToolkit REQUIRED COMPONENTS cusparse cublas curand)
        add_definitions(-DUSE_CUDA)

        message(STATUS "CUDA ${CUDAToolkit_VERSION} found")
        message(STATUS "CUDA architectures: ${CMAKE_CUDA_ARCHITECTURES}")
    else()
        message(WARNING "CUDA requested but not found")
        set(USE_CUDA OFF)
    endif()
endif()

# JSON support (required for materials database)
if(USE_JSON)
    find_package(nlohmann_json QUIET)

    if(NOT nlohmann_json_FOUND)
        include(FetchContent)
        FetchContent_Declare(
            nlohmann_json
            GIT_REPOSITORY https://github.com/nlohmann/json.git
            GIT_TAG v3.11.3
            GIT_SHALLOW TRUE
        )
        FetchContent_MakeAvailable(nlohmann_json)
    endif()

    add_definitions(-DUSE_JSON)
endif()

# MPI (optional for distributed fitting)
if(USE_MPI)
    find_package(MPI REQUIRED)
    add_definitions(-DUSE_MPI)
endif()

# Optional performance libraries
find_package(PkgConfig QUIET)
if(PkgConfig_FOUND)
    # FFTW for enhanced FFT performance
    pkg_check_modules(FFTW3 fftw3)
    if(FFTW3_FOUND)
        add_definitions(-DUSE_FFTW)
        message(STATUS "FFTW3 found: ${FFTW3_VERSION}")
    endif()

    # Intel MKL for BLAS/LAPACK
    pkg_check_modules(MKL mkl-dynamic-lp64-iomp)
    if(MKL_FOUND)
        add_definitions(-DUSE_MKL)
        message(STATUS "Intel MKL found")
    endif()
endif()

# HDF5 for large dataset support
find_package(HDF5 QUIET COMPONENTS CXX)
if(HDF5_FOUND)
    add_definitions(-DUSE_HDF5)
    message(STATUS "HDF5 found: ${HDF5_VERSION}")
endif()

# Include directories
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# Source file collections
set(CORE_HEADERS
    pseudomode_solver_extended.h
    fit_cache.h
    lbfgs_optimizer.h
    advanced_fitting.h
)

set(CORE_SOURCES
    spectral_density_3d.cpp
    material_database_extended.cpp
    fitting_framework.cpp
    fit_cache.cpp
    lbfgs_optimizer.cpp
    advanced_fitting.cpp
)

set(CLI_SOURCES
    pseudomode_cli_extended.cpp
    scan_main.cpp
)

# CUDA sources (if available)
if(USE_CUDA AND CUDAToolkit_FOUND)
    set(CUDA_SOURCES
        cuda/pseudomode_kernels.cu
        cuda/spectral_density_kernels.cu
        cuda/prony_fit_kernels.cu
    )
endif()

# Create main shared library
add_library(pseudomode_extended SHARED ${CORE_SOURCES})

# Set library properties
set_target_properties(pseudomode_extended PROPERTIES
    VERSION ${PROJECT_VERSION}
    SOVERSION 2
    PUBLIC_HEADER "${CORE_HEADERS}"
    CXX_VISIBILITY_PRESET hidden
    VISIBILITY_INLINES_HIDDEN ON
)

# Link core dependencies
if(USE_EIGEN)
    target_link_libraries(pseudomode_extended PUBLIC Eigen3::Eigen)
endif()

if(USE_OPENMP AND OpenMP_CXX_FOUND)
    target_link_libraries(pseudomode_extended PRIVATE OpenMP::OpenMP_CXX)
endif()

if(USE_JSON)
    if(TARGET nlohmann_json::nlohmann_json)
        target_link_libraries(pseudomode_extended PRIVATE nlohmann_json::nlohmann_json)
    else()
        target_link_libraries(pseudomode_extended PRIVATE nlohmann_json)
    endif()
endif()

# CUDA library (separate for clean architecture)
if(USE_CUDA AND CUDAToolkit_FOUND)
    add_library(pseudomode_cuda SHARED ${CUDA_SOURCES})
    set_target_properties(pseudomode_cuda PROPERTIES
        CUDA_SEPARABLE_COMPILATION ON
        CXX_VISIBILITY_PRESET hidden
    )

    target_link_libraries(pseudomode_cuda PRIVATE 
        CUDA::cusparse 
        CUDA::cublas 
        CUDA::curand
    )

    target_link_libraries(pseudomode_extended PRIVATE pseudomode_cuda)
endif()

# Optional library links
if(FFTW3_FOUND)
    target_include_directories(pseudomode_extended PRIVATE ${FFTW3_INCLUDE_DIRS})
    target_link_libraries(pseudomode_extended PRIVATE ${FFTW3_LIBRARIES})
endif()

if(MKL_FOUND)
    target_include_directories(pseudomode_extended PRIVATE ${MKL_INCLUDE_DIRS})
    target_link_libraries(pseudomode_extended PRIVATE ${MKL_LIBRARIES})
endif()

if(HDF5_FOUND)
    target_include_directories(pseudomode_extended PRIVATE ${HDF5_INCLUDE_DIRS})
    target_link_libraries(pseudomode_extended PRIVATE ${HDF5_LIBRARIES})
endif()

if(USE_MPI)
    target_link_libraries(pseudomode_extended PRIVATE MPI::MPI_CXX)
endif()

# Main CLI executables
add_executable(pseudomode_cli pseudomode_cli_extended.cpp)
target_link_libraries(pseudomode_cli pseudomode_extended)

add_executable(pseudomode_scan scan_main.cpp)
target_link_libraries(pseudomode_scan pseudomode_extended)

# Fitting tools
if(BUILD_FITTING_TOOLS)
    # Basic fitter
    add_executable(pseudomode_fit autofit_main.cpp)
    target_link_libraries(pseudomode_fit pseudomode_extended)

    # Advanced fitter with all features
    add_executable(pseudomode_fit_advanced advanced_fit_main.cpp)
    target_link_libraries(pseudomode_fit_advanced pseudomode_extended)

    # Utility tools
    add_executable(fitpack_gen fitpack_generator.cpp)
    target_link_libraries(fitpack_gen pseudomode_extended)

    add_executable(vars_template_gen vars_template_gen.cpp)
    target_link_libraries(vars_template_gen pseudomode_extended)

    add_executable(curve_targets curve_targets.cpp)
    target_link_libraries(curve_targets pseudomode_extended)

    add_executable(pseudomode_predict predict_main.cpp)
    target_link_libraries(pseudomode_predict pseudomode_extended)
endif()

# Advanced analysis tools
if(BUILD_ADVANCED_TOOLS)
    add_executable(bootstrap_fit bootstrap_main.cpp)
    target_link_libraries(bootstrap_fit pseudomode_extended)

    add_executable(parameter_sweep sweep_main.cpp)
    target_link_libraries(parameter_sweep pseudomode_extended)

    add_executable(validate_physics physics_validation.cpp)
    target_link_libraries(validate_physics pseudomode_extended)

    add_executable(report_generator report_main.cpp)
    target_link_libraries(report_generator pseudomode_extended)
endif()

# MPI tools
if(USE_MPI)
    add_executable(pseudomode_fit_mpi mpi_fit_main.cpp)
    target_link_libraries(pseudomode_fit_mpi pseudomode_extended MPI::MPI_CXX)
endif()

# Python bindings
if(BUILD_PYTHON_BINDINGS)
    find_package(pybind11 QUIET)

    if(pybind11_FOUND)
        pybind11_add_module(pseudomode_py python_bindings_extended.cpp)
        target_link_libraries(pseudomode_py PRIVATE pseudomode_extended)

        set_target_properties(pseudomode_py PROPERTIES
            PREFIX "${PYTHON_MODULE_PREFIX}"
            SUFFIX "${PYTHON_MODULE_EXTENSION}"
        )

        # Python tests
        add_custom_target(test_python
            COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CMAKE_CURRENT_BINARY_DIR}
                    ${PYTHON_EXECUTABLE} -m pytest ${CMAKE_CURRENT_SOURCE_DIR}/tests/python/
            DEPENDS pseudomode_py
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        )
    else()
        message(WARNING "pybind11 not found, skipping Python bindings")
    endif()
endif()

# Unit tests
if(BUILD_TESTS)
    enable_testing()

    find_package(GTest QUIET)
    if(GTest_FOUND)
        # Core functionality tests
        add_executable(test_spectral_3d tests/test_spectral_3d.cpp)
        target_link_libraries(test_spectral_3d pseudomode_extended GTest::GTest GTest::Main)
        add_test(NAME SpectralDensity3D COMMAND test_spectral_3d)

        add_executable(test_material_loading tests/test_material_loading.cpp)
        target_link_libraries(test_material_loading pseudomode_extended GTest::GTest GTest::Main)
        add_test(NAME MaterialLoading COMMAND test_material_loading)

        add_executable(test_channel_analysis tests/test_channel_analysis.cpp)
        target_link_libraries(test_channel_analysis pseudomode_extended GTest::GTest GTest::Main)
        add_test(NAME ChannelAnalysis COMMAND test_channel_analysis)

        add_executable(test_fitting tests/test_fitting.cpp)
        target_link_libraries(test_fitting pseudomode_extended GTest::GTest GTest::Main)
        add_test(NAME ParameterFitting COMMAND test_fitting)

        add_executable(test_lbfgs tests/test_lbfgs.cpp)
        target_link_libraries(test_lbfgs pseudomode_extended GTest::GTest GTest::Main)
        add_test(NAME LBFGSOptimizer COMMAND test_lbfgs)

        add_executable(test_cache tests/test_cache.cpp)
        target_link_libraries(test_cache pseudomode_extended GTest::GTest GTest::Main)
        add_test(NAME ObjectiveCache COMMAND test_cache)

        # Physics validation tests
        add_executable(test_physics_validation tests/test_physics_validation.cpp)
        target_link_libraries(test_physics_validation pseudomode_extended GTest::GTest GTest::Main)
        add_test(NAME PhysicsValidation COMMAND test_physics_validation)

        # Integration tests
        add_executable(test_integration tests/test_integration.cpp)
        target_link_libraries(test_integration pseudomode_extended GTest::GTest GTest::Main)
        add_test(NAME Integration COMMAND test_integration)

        # JSON schema tests
        add_test(NAME JSONSchemas 
                 COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_SOURCE_DIR}/tests/validate_schemas.cmake)

        # CLI tests
        add_test(NAME CLIBasic 
                 COMMAND pseudomode_cli --help)
        add_test(NAME CLIScan 
                 COMMAND pseudomode_scan --help)

    else()
        message(WARNING "GTest not found, skipping unit tests")

        # Fallback: simple test executables without GTest
        add_executable(simple_test_spectral tests/simple_test_spectral.cpp)
        target_link_libraries(simple_test_spectral pseudomode_extended)
        add_test(NAME SimpleSpectralTest COMMAND simple_test_spectral)
    endif()
endif()

# Benchmarks
if(BUILD_BENCHMARKS)
    find_package(benchmark QUIET)
    if(benchmark_FOUND)
        add_executable(benchmark_spectral benchmarks/benchmark_spectral.cpp)
        target_link_libraries(benchmark_spectral pseudomode_extended benchmark::benchmark)

        add_executable(benchmark_fitting benchmarks/benchmark_fitting.cpp)
        target_link_libraries(benchmark_fitting pseudomode_extended benchmark::benchmark)

        add_executable(benchmark_scaling benchmarks/benchmark_scaling.cpp)
        target_link_libraries(benchmark_scaling pseudomode_extended benchmark::benchmark)

        add_executable(benchmark_memory benchmarks/benchmark_memory.cpp)
        target_link_libraries(benchmark_memory pseudomode_extended benchmark::benchmark)

        # Custom benchmark target
        add_custom_target(run_benchmarks
            COMMAND benchmark_spectral --benchmark_time_unit=ms
            COMMAND benchmark_fitting --benchmark_time_unit=ms  
            COMMAND benchmark_scaling --benchmark_time_unit=ms
            DEPENDS benchmark_spectral benchmark_fitting benchmark_scaling
        )

    else()
        message(WARNING "Google Benchmark not found, skipping benchmarks")
    endif()
endif()

# Profiling support
if(ENABLE_PROFILING)
    find_program(PERF_EXECUTABLE perf)
    if(PERF_EXECUTABLE)
        add_custom_target(profile_fitting
            COMMAND perf record -g ./pseudomode_fit example_fitpacks.json
            COMMAND perf report
            DEPENDS pseudomode_fit
        )
    endif()

    # Intel VTune support
    find_program(VTUNE_EXECUTABLE vtune)
    if(VTUNE_EXECUTABLE)
        add_custom_target(vtune_analysis
            COMMAND vtune -collect hotspots -r vtune_results ./pseudomode_fit
            DEPENDS pseudomode_fit
        )
    endif()
endif()

# Docker support
if(BUILD_DOCKER_IMAGE)
    find_program(DOCKER_EXECUTABLE docker)
    if(DOCKER_EXECUTABLE)
        add_custom_target(docker_build
            COMMAND docker build -t pseudomode-framework:${PROJECT_VERSION} .
            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        )

        add_custom_target(docker_test
            COMMAND docker run --rm pseudomode-framework:${PROJECT_VERSION} 
                    ./build/test_integration
            DEPENDS docker_build
        )
    endif()
endif()

# Installation configuration
include(GNUInstallDirs)

# Install main library and executables
install(TARGETS pseudomode_extended pseudomode_cli pseudomode_scan
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/pseudomode
)

# Install CUDA library if built
if(TARGET pseudomode_cuda)
    install(TARGETS pseudomode_cuda
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    )
endif()

# Install fitting tools
if(BUILD_FITTING_TOOLS)
    install(TARGETS pseudomode_fit fitpack_gen vars_template_gen curve_targets pseudomode_predict
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    )

    if(TARGET pseudomode_fit_advanced)
        install(TARGETS pseudomode_fit_advanced
            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        )
    endif()
endif()

# Install advanced tools
if(BUILD_ADVANCED_TOOLS)
    install(TARGETS bootstrap_fit parameter_sweep validate_physics report_generator
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    )
endif()

# Install MPI tools
if(USE_MPI AND TARGET pseudomode_fit_mpi)
    install(TARGETS pseudomode_fit_mpi
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    )
endif()

# Install Python module
if(BUILD_PYTHON_BINDINGS AND TARGET pseudomode_py)
    install(TARGETS pseudomode_py
        LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/python3/site-packages
    )
endif()

# Install data files
install(FILES 
    materials_3d.json
    DESTINATION ${CMAKE_INSTALL_DATADIR}/pseudomode
)

install(DIRECTORY data/
    DESTINATION ${CMAKE_INSTALL_DATADIR}/pseudomode
    FILES_MATCHING PATTERN "*.json" PATTERN "*.schema.json"
)

install(DIRECTORY examples/
    DESTINATION ${CMAKE_INSTALL_DATADIR}/pseudomode/examples
)

# Install documentation
install(FILES 
    README_extended.md
    LICENSE
    CHANGELOG.md
    DESTINATION ${CMAKE_INSTALL_DOCDIR}
)

# Package configuration for find_package() support
include(CMakePackageConfigHelpers)

configure_package_config_file(
    cmake/pseudomode-extended-config.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/pseudomode-extended-config.cmake
    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/pseudomode-extended
    PATH_VARS CMAKE_INSTALL_INCLUDEDIR CMAKE_INSTALL_LIBDIR
)

write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/pseudomode-extended-config-version.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/pseudomode-extended-config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/pseudomode-extended-config-version.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/pseudomode-extended
)

# Export targets for build tree usage
export(TARGETS pseudomode_extended
    FILE ${CMAKE_CURRENT_BINARY_DIR}/pseudomode-extended-targets.cmake
)

# Uninstall target
if(NOT TARGET uninstall)
    configure_file(
        "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
        IMMEDIATE @ONLY
    )

    add_custom_target(uninstall
        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake
    )
endif()

# CPack packaging configuration
set(CPACK_PACKAGE_NAME "pseudomode-framework-extended")
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Extended 2D/3D Non-Markovian Pseudomode Framework")
set(CPACK_PACKAGE_VENDOR "Aetheron Research")
set(CPACK_PACKAGE_CONTACT "technical-support@aetheron-research.com")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README_extended.md")

# Platform-specific packaging
if(WIN32)
    set(CPACK_GENERATOR "NSIS" "ZIP")
elseif(APPLE)
    set(CPACK_GENERATOR "DragNDrop" "TGZ")
else()
    set(CPACK_GENERATOR "TGZ" "DEB" "RPM")
endif()

include(CPack)

# Print configuration summary
message(STATUS "")
message(STATUS "████████████████████████████████████████████████████████████████")
message(STATUS "Extended 2D/3D Pseudomode Framework - Configuration Summary")
message(STATUS "████████████████████████████████████████████████████████████████")
message(STATUS "Version: ${PROJECT_VERSION}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "")
message(STATUS "Core Dependencies:")
message(STATUS "  Eigen3: ${Eigen3_FOUND}")
message(STATUS "  JSON: ${USE_JSON}")
message(STATUS "")
message(STATUS "Performance Features:")
message(STATUS "  CUDA: ${USE_CUDA}")
if(USE_CUDA)
    message(STATUS "    Version: ${CUDAToolkit_VERSION}")
    message(STATUS "    Architectures: ${CMAKE_CUDA_ARCHITECTURES}")
endif()
message(STATUS "  OpenMP: ${USE_OPENMP}")
message(STATUS "  FFTW3: ${FFTW3_FOUND}")
message(STATUS "  MKL: ${MKL_FOUND}")
message(STATUS "  HDF5: ${HDF5_FOUND}")
message(STATUS "  MPI: ${USE_MPI}")
message(STATUS "")
message(STATUS "Build Components:")
message(STATUS "  Python bindings: ${BUILD_PYTHON_BINDINGS}")
message(STATUS "  Unit tests: ${BUILD_TESTS}")
message(STATUS "  Benchmarks: ${BUILD_BENCHMARKS}")
message(STATUS "  Fitting tools: ${BUILD_FITTING_TOOLS}")
message(STATUS "  Advanced tools: ${BUILD_ADVANCED_TOOLS}")
message(STATUS "")
message(STATUS "Development Features:")
message(STATUS "  Coverage analysis: ${ENABLE_COVERAGE}")
message(STATUS "  Memory sanitizers: ${ENABLE_SANITIZERS}")
message(STATUS "  Profiling support: ${ENABLE_PROFILING}")
message(STATUS "  Fast math: ${USE_FAST_MATH}")
message(STATUS "")
message(STATUS "Ready for:")
message(STATUS "  • 2D materials: MoS₂, WSe₂, graphene, hBN")
message(STATUS "  • 3D materials: GaAs, Diamond NV, 4H-SiC, Si:P, InAs")
message(STATUS "  • Advanced fitting: L-BFGS, bootstrap, regularization")
message(STATUS "  • High performance: GPU + OpenMP acceleration")
message(STATUS "  • Enterprise deployment: Apache-2.0 license")
message(STATUS "████████████████████████████████████████████████████████████████")
message(STATUS "")
